// Generated 12 Nov 2021 13:53 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Basket
{
    [Serializable]
    public class DeliveryOption
     : SingularBusinessBase<DeliveryOption>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> DeliveryOptionIDProperty = RegisterProperty<int>(c => c.DeliveryOptionID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int DeliveryOptionID
        {
            get { return GetProperty(DeliveryOptionIDProperty); }
        }

        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<int?> DeliveryOptionTypeIDProperty = RegisterProperty<int?>(c => c.DeliveryOptionTypeID, "Delivery Option Type", null);
        /// <summary>
        /// Gets and sets the Delivery Option Type value
        /// </summary>
        [Display(Name = "Delivery Option Type", Description = ""),
        Required(ErrorMessage = "Delivery Option Type required")]
        public int? DeliveryOptionTypeID
        {
            get { return GetProperty(DeliveryOptionTypeIDProperty); }
            set { SetProperty(DeliveryOptionTypeIDProperty, value); }
        }

        public static PropertyInfo<String> AddressProperty = RegisterProperty<String>(c => c.Address, "Address", "");
        /// <summary>
        /// Gets and sets the Address value
        /// </summary>
        [Display(Name = "Address", Description = ""),
        StringLength(50, ErrorMessage = "Address cannot be more than 50 characters")]
        public String Address
        {
            get { return GetProperty(AddressProperty); }
            set { SetProperty(AddressProperty, value); }
        }

        public static PropertyInfo<DateTime> DateProperty = RegisterProperty<DateTime>(c => c.Date, "Date");
        /// <summary>
        /// Gets and sets the Date value
        /// </summary>
        [Display(Name = "Date", Description = ""),
        Required(ErrorMessage = "Date required")]
        public DateTime Date
        {
            get
            {
                return GetProperty(DateProperty);
            }
            set
            {
                SetProperty(DateProperty, value);
            }
        }

        public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", false);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = ""),
        Required(ErrorMessage = "Is Active required")]
        public Boolean IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets and sets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
            set
            {
                SetProperty(DeletedDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(DeliveryOptionIDProperty);
        }

        public override string ToString()
        {
            if (this.Address.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Delivery Option");
                }
                else
                {
                    return String.Format("Blank {0}", "Delivery Option");
                }
            }
            else
            {
                return this.Address;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewDeliveryOption() method.
        }

        public static DeliveryOption NewDeliveryOption()
        {
            return DataPortal.CreateChild<DeliveryOption>();
        }

        public DeliveryOption()
        {
            MarkAsChild();
        }

        internal static DeliveryOption GetDeliveryOption(SafeDataReader dr)
        {
            var d = new DeliveryOption();
            d.Fetch(dr);
            return d;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(DeliveryOptionIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(DeliveryOptionTypeIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(AddressProperty, sdr.GetString(i++));
                LoadProperty(DateProperty, sdr.GetValue(i++));
                LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
                LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, DeliveryOptionIDProperty);

            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
            cm.Parameters.AddWithValue("@DeliveryOptionTypeID", GetProperty(DeliveryOptionTypeIDProperty));
            cm.Parameters.AddWithValue("@Address", GetProperty(AddressProperty));
            cm.Parameters.AddWithValue("@Date", Date);
            cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
            cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(DeliveryOptionIDProperty, scm.Parameters["@DeliveryOptionID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@DeliveryOptionID", GetProperty(DeliveryOptionIDProperty));
        }

        #endregion

    }

}