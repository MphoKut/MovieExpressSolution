// Generated 15 Nov 2021 12:32 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Order
{
    [Serializable]
    public class Order
     : SingularBusinessBase<Order>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderIDProperty = RegisterProperty<int>(c => c.OrderID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderID
        {
            get { return GetProperty(OrderIDProperty); }
        }

        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = "")]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<int?> BasketIDProperty = RegisterProperty<int?>(c => c.BasketID, "Basket", null);
        /// <summary>
        /// Gets and sets the Basket value
        /// </summary>
        [Display(Name = "Basket", Description = "")]
        public int? BasketID
        {
            get { return GetProperty(BasketIDProperty); }
            set { SetProperty(BasketIDProperty, value); }
        }

        public static PropertyInfo<int?> DeliveryOptionTypeIDProperty = RegisterProperty<int?>(c => c.DeliveryOptionTypeID, "Delivery Option Type", null);
        /// <summary>
        /// Gets and sets the Delivery Option Type value
        /// </summary>
        [Display(Name = "Delivery Option Type", Description = "")]
        [Singular.DataAnnotations.DropDownWeb(typeof(MELib.Basket.DeliveryOptionTypeList), UnselectedText = "Option", ValueMember = "DeliveryOptionTypeID", DisplayMember = "DeliveryOptionTypeName")]
        public int? DeliveryOptionTypeID
        {
            get { return GetProperty(DeliveryOptionTypeIDProperty); }
            set { SetProperty(DeliveryOptionTypeIDProperty, value); }
        }

        public static PropertyInfo<int> ItemCountProperty = RegisterProperty<int>(c => c.ItemCount, "Item Count", 0);
        /// <summary>
        /// Gets and sets the Item Count value
        /// </summary>
        [Display(Name = "Item Count", Description = "")]
        public int ItemCount
        {
            get { return GetProperty(ItemCountProperty); }
            set { SetProperty(ItemCountProperty, value); }
        }

        public static PropertyInfo<Decimal> AmountProperty = RegisterProperty<Decimal>(c => c.Amount, "Amount", 0D);
        /// <summary>
        /// Gets and sets the Amount value
        /// </summary>
        [Display(Name = "Amount", Description = "")]
        public Decimal Amount
        {
            get { return GetProperty(AmountProperty); }
            set { SetProperty(AmountProperty, value); }
        }

        public static PropertyInfo<Boolean?> IsActiveIndProperty = RegisterProperty<Boolean?>(c => c.IsActiveInd, "Is Active", null);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "")]
        public Boolean? IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets and sets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
            set
            {
                SetProperty(DeletedDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderIDProperty);
        }

        public override string ToString()
        {
            if (this.CreatedDate.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order");
                }
                else
                {
                    return String.Format("Blank {0}", "Order");
                }
            }
            else
            {
                return this.CreatedDate.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrder() method.
        }

        public static Order NewOrder()
        {
            return DataPortal.CreateChild<Order>();
        }

        public Order()
        {
            MarkAsChild();
        }

        internal static Order GetOrder(SafeDataReader dr)
        {
            var o = new Order();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(BasketIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(DeliveryOptionTypeIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ItemCountProperty, sdr.GetInt32(i++));
                LoadProperty(AmountProperty, sdr.GetDecimal(i++));
                object tmpIsActiveInd = sdr.GetValue(i++);
                if (tmpIsActiveInd == System.DBNull.Value)
                {
                    LoadProperty(IsActiveIndProperty, null);
                }
                else
                {
                    LoadProperty(IsActiveIndProperty, (bool?)tmpIsActiveInd);
                }
                LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, OrderIDProperty);

            cm.Parameters.AddWithValue("@UserID", Singular.Misc.NothingDBNull(GetProperty(UserIDProperty)));
            cm.Parameters.AddWithValue("@BasketID", Singular.Misc.NothingDBNull(GetProperty(BasketIDProperty)));
            cm.Parameters.AddWithValue("@DeliveryOptionTypeID", Singular.Misc.NothingDBNull(GetProperty(DeliveryOptionTypeIDProperty)));
            cm.Parameters.AddWithValue("@ItemCount", GetProperty(ItemCountProperty));
            cm.Parameters.AddWithValue("@Amount", GetProperty(AmountProperty));
            cm.Parameters.AddWithValue("@IsActiveInd", Singular.Misc.NothingDBNull(GetProperty(IsActiveIndProperty)));
            cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderIDProperty, scm.Parameters["@OrderID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
        }

        #endregion

    }

}