// Generated 20 Oct 2021 13:45 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Maintenance
{
    [Serializable]
    public class Supplier
     : SingularBusinessBase<Supplier>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> SupplierIDProperty = RegisterProperty<int>(c => c.SupplierID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int SupplierID
        {
            get { return GetProperty(SupplierIDProperty); }
        }

        public static PropertyInfo<String> SupplierNameProperty = RegisterProperty<String>(c => c.SupplierName, "Supplier Name", "");
        /// <summary>
        /// Gets and sets the Supplier Name value
        /// </summary>
        [Display(Name = "Supplier Name", Description = ""),
        StringLength(50, ErrorMessage = "Supplier Name cannot be more than 50 characters")]
        public String SupplierName
        {
            get { return GetProperty(SupplierNameProperty); }
            set { SetProperty(SupplierNameProperty, value); }
        }

        public static PropertyInfo<String> SupplierAddressProperty = RegisterProperty<String>(c => c.SupplierAddress, "Supplier Address", "");
        /// <summary>
        /// Gets and sets the Supplier Address value
        /// </summary>
        [Display(Name = "Supplier Address", Description = ""),
        StringLength(50, ErrorMessage = "Supplier Address cannot be more than 50 characters")]
        public String SupplierAddress
        {
            get { return GetProperty(SupplierAddressProperty); }
            set { SetProperty(SupplierAddressProperty, value); }
        }

        public static PropertyInfo<Decimal> SupplierContactNoProperty = RegisterProperty<Decimal>(c => c.SupplierContactNo, "Supplier Contact No");
        /// <summary>
        /// Gets and sets the Supplier Contact No value
        /// </summary>
        [Display(Name = "Supplier Contact No", Description = ""),
        Required(ErrorMessage = "Supplier Contact No required")]
        public Decimal SupplierContactNo
        {
            get { return GetProperty(SupplierContactNoProperty); }
            set { SetProperty(SupplierContactNoProperty, value); }
        }

        public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", false);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = ""),
        Required(ErrorMessage = "Is Active required")]
        public Boolean IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets and sets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
            set
            {
                SetProperty(DeletedDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(SupplierIDProperty);
        }

        public override string ToString()
        {
            if (this.SupplierName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Supplier");
                }
                else
                {
                    return String.Format("Blank {0}", "Supplier");
                }
            }
            else
            {
                return this.SupplierName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewSupplier() method.
        }

        public static Supplier NewSupplier()
        {
            return DataPortal.CreateChild<Supplier>();
        }

        public Supplier()
        {
            MarkAsChild();
        }

        internal static Supplier GetSupplier(SafeDataReader dr)
        {
            var s = new Supplier();
            s.Fetch(dr);
            return s;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(SupplierIDProperty, sdr.GetInt32(i++));
                LoadProperty(SupplierNameProperty, sdr.GetString(i++));
                LoadProperty(SupplierAddressProperty, sdr.GetString(i++));
                LoadProperty(SupplierContactNoProperty, sdr.GetDecimal(i++));
                LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
                LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, SupplierIDProperty);

            cm.Parameters.AddWithValue("@SupplierName", GetProperty(SupplierNameProperty));
            cm.Parameters.AddWithValue("@SupplierAddress", GetProperty(SupplierAddressProperty));
            cm.Parameters.AddWithValue("@SupplierContactNo", GetProperty(SupplierContactNoProperty));
            cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
            cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(SupplierIDProperty, scm.Parameters["@SupplierID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@SupplierID", GetProperty(SupplierIDProperty));
        }

        #endregion

    }

}